-- dnsdist configuration file, an example can be found in /usr/share/doc/dnsdist/examples/

-- disable security status polling via DNS
setSecurityPollSuffix("")


-- dnsdist configuration file, an example can be found in /usr/share/doc/dnsdist/examples/

-- disable security status polling via DNS
setSecurityPollSuffix("")
controlSocket('127.0.0.1:5199')
setConsoleACL('127.0.0.1/32')

--setKey("IS_SET_AUTOMATICALLY")

addLocal('127.0.0.5:53')
--addLocal('10.0.0.222:533')
--addLocal('0.0.0.0:53')
--addLocal('172.17.0.1:53')

---addLocal('10.0.0.1')
--addLocal('::1')
--addLocal('::0')

--webserver('127.0.0.1:8083', 'dnsdist', 'dnsdist')



addDOHLocal("0.0.0.0:8053", nil, nil, "/dns-query", { reusePort=true })
newServer("127.0.0.2")


function myHealthCheck(qname, qtype, qclass, dh)                                                                                                                                                                                              
  dh:setCD(true)                                                                                                                                                                                                                              
  return newDNSName("a.root-servers.net"), DNSQType.AAAA , qclass end



-- main resolver 
newServer({useClientSubnet,addXPF, type=doh,address="1.1.1.1:443", tls="openssl", subjectName="1.1.1.1", dohPath="/dns-query", validateCertificates=true, checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})
newServer({useClientSubnet,addXPF, type=dot,address="1.1.1.1:853", subjectName="one.one.one.one", validateCertificates=false, checkInterval=123,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})

newServer({useClientSubnet,addXPF,address="4.2.2.4:53", checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})

--newServer({address="91.239.100.100:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})
newServer({address="[2002:d596:2a92:1:71:53::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                             
                        
--newServer({address="127.0.0.2:53", checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})
--newServer({address="127.0.0.3:53", checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})

---newServer({address="127.0.0.1:5353", qps=123})
                                                                                                                                                                                                                                              
newServer({address="9.9.9.9:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})

                                                                                                                                                                                                                                              
--dns.sb
newServer({address="185.222.222.222:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="185.184.222.222:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                             

--newServer({address="45.11.45.11:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
newServer({address="45.11.45.11:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                             

newServer({address="[2a09::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2a09::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                             

--newServer({address="[2a11::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
newServer({address="[2a11::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                             

--anycast.uncensoreddns.org 
--newServer({address="91.239.100.100:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2002:d596:2a92:1:71:53::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             
                        
                                                                                                                                                                                                                                              
----dns2.digitalcourage.de                                                                                                                                                                                                                    
newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                         
newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                 
--newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                                                           
--newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=123})                                                                                                                   
newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                                                         
newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                                                                 

                                                                                                                                                                                                                                              
--recursor01.dns.ipfire.org                                                                                                                                                                                                                   
newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                             
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   
newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                                                                     

--censurfridns.dk
newServer({address="89.233.43.71:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   

--dns.watch
newServer({address="84.200.69.80:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   
newServer({address="84.200.70.40:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   

--Lightning Wire Labs
--newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})
newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                             


--freenom
newServer({address="80.80.80.80:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="80.80.81.81:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             
--newServer({address="80.80.80.80:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})
newServer({address="80.80.81.81:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                             

--Hurricane Electric
--newServer({address="74.82.42.42:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2001:470:20::2]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             
newServer({address="74.82.42.42:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})
newServer({address="[2001:470:20::2]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=123})                                                                             


setServerPolicy(leastOutstanding)                                                                                                                                                                                                                                              
--getPool(""):setServerPolicy(roundrobin)
---getPool("fallback"):setServerPolicy(leastOutstanding)
pc = newPacketCache(1024)
getPool(""):setCache(pc)
fbpc = newPacketCache(1024)
getPool("fallback"):setCache(fbpc)                                                                                                                                                                                                                                              

--- Send queries to fallback poolas default
addAction(AllRule(), ContinueAction(PoolAction("fallback")))
--- Send queries to default pool when servers are available 
addAction(PoolAvailableRule(""),ContinueAction( PoolAction("")))

setServerPolicy(firstAvailable)



-- For any IPv4 address and for any IPv6 /64, if traffic exceeds 32 QPS
-- immediately set TC bit on response causing fallback to TCP/IP
addAction(MaxQPSIPRule(32, 32, 64), TCAction())
---addAnyTCRule() -- do the same for all ANY queries

----This measures traffic per IPv4 address and per /48 of IPv6, and if traffic for such an address (range) exceeds 50 qps, it gets delayed by 30ms
addAction(MaxQPSIPRule(50, 32, 48), DelayAction(30))
addAction( QTypeRule(DNSQType.ANY) , DelayAction(30))

-- add 100 000 entry package cache
--pc = newPacketCache(1000000, 86400, 0, 60, 60)
--getPool(""):setCache(pc)

setStaleCacheEntriesTTL(360)
-- cache 6m when backends are down

-- delay NXDOMAin for 30ms
addResponseAction(RCodeRule(DNSRCode.NXDOMAIN), DelayResponseAction(30))
-- delay NXDOMAIN cache hits for additional 25 ms
addCacheHitResponseAction(RCodeRule(DNSRCode.NXDOMAIN), DelayResponseAction(25))


--- FILTER SECTION
--------------addAction("0.8.e.f.ip6.arpa", SpoofAction({"127.0.0.1"}))

---addAction({'168.192.in-addr.arpa', '10.in-addr.arpa'},DropAction())

--ip6 link local reverse ptr
--addAction({'0.8.e.f.ip6.arpa'},DropAction())
addAction("1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa", SpoofCNAMEAction("ipv6-fe80.gateway"))
--addAction("0.8.e.f.ip6.arpa", SpoofCNAMEAction("ip6.local.ptr.blocked"))

--ip4/6 localhost

addAction(AndRule({QNameRule('1.0.0.127.in-addr.arpa'), QTypeRule(DNSQType.PTR)}),SpoofCNAMEAction("localhost")) 
addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofCNAMEAction("localhost"))

---addAction(AndRule({QNameRule('1.0.0.127.in-addr.arpa.'), QTypeRule(DNSQType.PTR)}), SpoofRawAction("\009localhost\000"))
---addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofRawAction("\009localhost\000"))
---addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofRawAction("\009ip6-localhost\000"))
---addAction({'0.8.e.f.ip6.arpa'}, SpoofRawAction("\009ip6.local.ptr.blocked\000"))

addAction(QTypeRule(DNSQType.PTR),PoolAction("bypass")) -- send remaining ptrs to clean upstream

addAction({'metric.gstatic.com'}, PoolAction("fallback")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

---addAction("h4xorbooter.xyz.", QPSAction(10))
addAction({'pool.ntp.org'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'my.nextdns.io','favicon.nextdns.io'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'sourcehut.org', 'bitbucket.org'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'assets.gitlab-static.net', 'gitlab.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
--addAction({'media.githubusercontent.com','avatars.githubusercontent.com.','raw.githubusercontent.com', 'github.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'jsdelivr.com','glcdn.githack.com','gitcdn.xyz', 'cdnjs.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'youtube.googleapis.com','ajax.googleapis.com','ajax.cloudflare.com','fonts.gstatic.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'classify-client.services.mozilla.com','versioncheck-bg.addons.mozilla.org','services.addons.mozilla.org','ftp.mozilla.org','firefox.settings.services.mozilla.com','connectivity-check.ubuntu.com','connectivitycheck.gstatic.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'release.calyxinstitute.org','apt.syncthing.net','archive.canonical.com','s3.brave.com','debian.charite.de','deb.xanmod.org','download.virtualbox.org','kx.studio','linux.teamviewer.com','mirror.bauhuette.fh-aachen.de','ppa.launchpad.net','security.ubuntu.com','us.archive.ubuntu.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'ocsp.digicert.com','lencr.org','letsencrypt.org','dnsprivacy.org','domainsproject.org', 'cdnjs.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'staticcdn.duckduckgo.com','startpage.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'cdn.sstatic.net','sockets.stackexchange.com','stackexchange.com','askubuntu.com','superuser.com', 'serverfault.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool


--- Send queries to fallback pool as default
addAction(AllRule(), ContinueAction(PoolAction("fallback")))
--- Send queries to default pool when servers are available
addAction(PoolAvailableRule(""),ContinueAction( PoolAction("")))

infolog("ready1")
