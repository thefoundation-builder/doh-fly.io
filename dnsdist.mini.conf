setSecurityPollSuffix("")
setECSSourcePrefixV4(32)
setECSSourcePrefixV6(128)
controlSocket('127.0.0.1:5199')
setConsoleACL('127.0.0.1/32')
setMaxTCPClientThreads(8) 
setRingBuffersSize(4235,12)
setMaxTCPConnectionDuration(32)
setUDPTimeout(32)
setMaxUDPOutstanding(1024)
setTCPDownstreamCleanupInterval(42)


function myHealthCheck(qname, qtype, qclass, dh)                                                                                                                                                                                              
  dh:setCD(true)                                                                                                                                                                                                                              
  return newDNSName("a.root-servers.net"), DNSQType.AAAA , qclass end


addLocal('127.0.0.5:53', { tcpFastOpenQueueSize=128,reusePort=true })
addLocal('127.0.0.6:53', { tcpFastOpenQueueSize=128,reusePort=true })
addDOHLocal("0.0.0.0:8053", nil, nil, "/dns-query", { reusePort=true })

newServer({address="127.0.0.10:53",source="127.0.0.110",sockets=32,retries=0,tcpFastOpen=True,tcpConnectTimeout=5,tcpSendTimeout=5,tcpReceiveTimeout=5,checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="", name="unboundA1"})
newServer({address="127.0.0.11:53",source="127.0.0.111",sockets=32,retries=0,tcpFastOpen=True,tcpConnectTimeout=5,tcpSendTimeout=5,tcpReceiveTimeout=5,checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="", name="unboundA2"})
newServer({address="127.0.0.12:53",source="127.0.0.112",sockets=32,retries=0,tcpFastOpen=True,tcpConnectTimeout=5,tcpSendTimeout=5,tcpReceiveTimeout=5,checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="", name="unboundB1"})
newServer({address="127.0.0.13:53",source="127.0.0.113",sockets=32,retries=0,tcpFastOpen=True,tcpConnectTimeout=5,tcpSendTimeout=5,tcpReceiveTimeout=5,checkInterval=23,checkFunction=myHealthCheck, mustResolve=true,pool="", name="unboundB2"})


--anycast.uncensoreddns.org 
--newServer({address="[2002:d596:2a92:1:71:53::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             
                        
                                                                                                                                                                                                                                              
---dns2.digitalcourage.de                                                                                                                                                                                                                    
--newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                         
newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                 

                                                                                                                                                                                                                                              
--recursor01.dns.ipfire.org                                                                                                                                                                                                                   
--newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                             
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   

--censurfridns.dk
--newServer({address="89.233.43.71:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   

--dns.watch
newServer({address="84.200.69.80:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   
newServer({address="84.200.70.40:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                                                                   

--Lightning Wire Labs
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             


--freenom
newServer({address="80.80.80.80:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
newServer({address="80.80.81.81:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             

--Hurricane Electric
newServer({address="74.82.42.42:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})
--newServer({address="[2001:470:20::2]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=123})                                                                             

setServerPolicy(leastOutstanding)                                                                                                                                                
--getPool("fallback"):setServerPolicy(leastOutstanding)

--- Send queries to fallback poolas default
addAction(AllRule(), ContinueAction(PoolAction("fallback")))
--- Send queries to default pool when servers are available 
addAction(PoolAvailableRule(""),ContinueAction( PoolAction("")))

infolog("ready1")


